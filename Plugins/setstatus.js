const { bot, parsedJid, validateTime, createStatusSchedule, getScheduleStatus, delScheduleStatus, deleteScheduleStatusTask, lang, } = require('../lib/')

bot( { pattern: 'setstatus ?(.*)', desc: lang.plugins.setstatus.desc, type: 'whatsapp', }, async (message, match) => { const jids = parsedJid(match) if (jids.length === 0 && match !== 'contact') { return await message.send( ╭━━〔 *MOK MD* 〕━━━⬣\n┃✾  ${lang.plugins.setstatus.usage}\n╰━━━━━━━━━━━━⬣ ) } if ( !message.reply_message || (!message.reply_message.image && !message.reply_message.video && !message.reply_message.txt) ) { return await message.send( ╭━━〔 *MOK MD* 〕━━━⬣\n┃✾  ${lang.plugins.setstatus.reply_required}\n╰━━━━━━━━━━━━⬣ ) } const statusCount = await message.setStatus(message, jids, match) await message.send( ╭━━〔 *MOK MD* 〕━━━⬣\n┃✾  ${lang.plugins.setstatus.sent.format(statusCount)}\n╰━━━━━━━━━━━━⬣ ) } )

bot( { pattern: 'scstatus ?(.*)', desc: lang.plugins.scstatus.desc, type: 'whatsapp', }, async (message, match) => { if (match === 'list') { const statuses = await getScheduleStatus(message.id) let msg = ╭━━〔 *MOK MD* 〕━━━⬣\n┃✾  ${lang.plugins.scstatus.list} statuses.forEach((status) => { msg += \n┃⏰  Time : ${status.time}\n┃👥  JIDs : ${ status.jids.length > 1 ? status.jids.join(', ') : 'contact' }\n┃──────────────────── }) msg += '\n╰━━━━━━━━━━━━⬣' return await message.send(msg) } if (match.startsWith('delete')) { match = match.replace('delete', '').trim() await delScheduleStatus(match, message.id) await deleteScheduleStatusTask(match, message.id) return await message.send(╭━━〔 *MOK MD* 〕━━━⬣\n┃✾  Deleted!\n╰━━━━━━━━━━━━⬣) } const [_, time] = match.split('|') const isTimeValid = validateTime(time) const jids = parsedJid(match) if ((jids.length === 0 && match.startsWith('contact')) || !isTimeValid) { return await message.send( ╭━━〔 *MOK MD* 〕━━━⬣\n┃✾  ${lang.plugins.scstatus.usage}\n╰━━━━━━━━━━━━⬣ ) } if ( !message.reply_message || (!message.reply_message.image && !message.reply_message.video && !message.reply_message.txt) ) { return await message.send( ╭━━〔 *MOK MD* 〕━━━⬣\n┃✾  ${lang.plugins.scstatus.reply_required}\n╰━━━━━━━━━━━━⬣ ) } const at = await createStatusSchedule(isTimeValid, message, jids, message.id) return await message.send( ╭━━〔 *MOK MD* 〕━━━⬣\n┃✾  ${lang.plugins.scstatus.scheduled.format(at)}\n╰━━━━━━━━━━━━⬣ ) } )

                                                                                                                                                                                                                                                                                                                                                                                                                                            
